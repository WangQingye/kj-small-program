"use strict";
Component({
    properties: {},
    data: {
        colors: []
    },
    methods: {
        onPickColor(e) {
            const { color } = e.currentTarget.dataset;
            this.triggerEvent('color', color);
        }
    },
    lifetimes: {
        attached() {
            const initColors = [
                [0xff, 0xff, 0xff],
                [0x99, 0xff, 0xcc],
                [0x99, 0xff, 0x99],
                [0xcc, 0xff, 0x99],
                [0xff, 0xcc, 0x99],
                [0xff, 0x99, 0x99],
                [0xff, 0x99, 0xcc],
                [0xcc, 0x99, 0xff],
                [0x99, 0x99, 0xff],
                [0x99, 0xcc, 0xff],
            ];
            let colors = [];
            for (let x = 0; x < 12; x++) {
                for (let y = 0; y < 10; y++) {
                    const index = y * 12 + x;
                    const origin = initColors[y].concat();
                    const final = origin.map(c => {
                        const step = y === 0 ? 23 : 16;
                        let phase = ~~(c - x * step);
                        phase = Math.max(0, phase);
                        phase = Math.min(255, phase);
                        return phase;
                    });
                    const color = `rgb(${final.join(',')})`;
                    colors[index] = color;
                }
            }
            this.setData({ colors });
        }
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGlja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29sb3ItcGlja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxTQUFTLENBQUM7SUFFUixVQUFVLEVBQUUsRUFBRTtJQUdkLElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxFQUFFO0tBQ1g7SUFHRCxPQUFPLEVBQUU7UUFDUCxXQUFXLENBQUMsQ0FBQztZQUNYLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQTtZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNuQyxDQUFDO0tBQ0Y7SUFvQkQsU0FBUyxFQUFFO1FBQ1QsUUFBUTtZQUNOLE1BQU0sVUFBVSxHQUFHO2dCQUNqQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNsQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO2FBQ25CLENBQUE7WUFDRCxJQUFJLE1BQU0sR0FBa0IsRUFBRSxDQUFBO1lBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzNCLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO29CQUN4QixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7b0JBQ3JDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQzNCLE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO3dCQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO3dCQUM1QixLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7d0JBQzFCLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTt3QkFDNUIsT0FBTyxLQUFLLENBQUE7b0JBQ2QsQ0FBQyxDQUFDLENBQUE7b0JBQ0YsTUFBTSxLQUFLLEdBQUcsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUE7b0JBQ3ZDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUE7aUJBQ3RCO2FBQ0Y7WUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtRQUMxQixDQUFDO0tBQ0Y7Q0FFRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJDb21wb25lbnQoe1xuICAvKiog57uE5Lu255qE5bGe5oCn5YiX6KGoICovXG4gIHByb3BlcnRpZXM6IHt9LFxuXG4gIC8qKiDnu4Tku7bnmoTliJ3lp4vmlbDmja4gKi9cbiAgZGF0YToge1xuICAgIGNvbG9yczogW11cbiAgfSxcblxuICAvKiog57uE5Lu255qE5pa55rOV5YiX6KGoICovXG4gIG1ldGhvZHM6IHtcbiAgICBvblBpY2tDb2xvcihlKSB7XG4gICAgICBjb25zdCB7IGNvbG9yIH0gPSBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldFxuICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ2NvbG9yJywgY29sb3IpXG4gICAgfVxuICB9LFxuXG4gIC8qKiBcbiAgICogMDAgMDAgMDAgLSBmZiBmZiBmZlxuICAgKiBcbiAgICogMDAgNjYgMzMgLSA5OSBmZiBjY1xuICAgKiAwMCA2NiAwMCAtIDk5IGZmIDk5XG4gICAqIDMzIDY2IDAwIC0gY2MgZmYgOTlcbiAgICogXG4gICAqIDY2IDMzIDAwIC0gZmYgY2MgOTlcbiAgICogNjYgMDAgMDAgLSBmZiA5OSA5OVxuICAgKiA2NiAwMCAzMyAtIGZmIDk5IGNjXG4gICAqIFxuICAgKiAzMyAwMCA2NiAtIGNjIDk5IGZmXG4gICAqIDAwIDAwIDY2IC0gOTkgOTkgZmZcbiAgICogMDAgMzMgNjYgLSA5OSBjYyBmZlxuICAgKiBcbiAgICogMDEyMzQ1Njc4OWFiY2RlZlxuICAgKi9cblxuICBsaWZldGltZXM6IHtcbiAgICBhdHRhY2hlZCgpIHtcbiAgICAgIGNvbnN0IGluaXRDb2xvcnMgPSBbXG4gICAgICAgIFsweGZmLCAweGZmLCAweGZmXSxcbiAgICAgICAgWzB4OTksIDB4ZmYsIDB4Y2NdLFxuICAgICAgICBbMHg5OSwgMHhmZiwgMHg5OV0sXG4gICAgICAgIFsweGNjLCAweGZmLCAweDk5XSxcbiAgICAgICAgWzB4ZmYsIDB4Y2MsIDB4OTldLFxuICAgICAgICBbMHhmZiwgMHg5OSwgMHg5OV0sXG4gICAgICAgIFsweGZmLCAweDk5LCAweGNjXSxcbiAgICAgICAgWzB4Y2MsIDB4OTksIDB4ZmZdLFxuICAgICAgICBbMHg5OSwgMHg5OSwgMHhmZl0sXG4gICAgICAgIFsweDk5LCAweGNjLCAweGZmXSxcbiAgICAgIF1cbiAgICAgIGxldCBjb2xvcnM6IEFycmF5PHN0cmluZz4gPSBbXVxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMjsgeCsrKSB7XG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgMTA7IHkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0geSAqIDEyICsgeFxuICAgICAgICAgIGNvbnN0IG9yaWdpbiA9IGluaXRDb2xvcnNbeV0uY29uY2F0KClcbiAgICAgICAgICBjb25zdCBmaW5hbCA9IG9yaWdpbi5tYXAoYyA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdGVwID0geSA9PT0gMCA/IDIzIDogMTZcbiAgICAgICAgICAgIGxldCBwaGFzZSA9IH5+KGMgLSB4ICogc3RlcClcbiAgICAgICAgICAgIHBoYXNlID0gTWF0aC5tYXgoMCwgcGhhc2UpXG4gICAgICAgICAgICBwaGFzZSA9IE1hdGgubWluKDI1NSwgcGhhc2UpXG4gICAgICAgICAgICByZXR1cm4gcGhhc2VcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNvbnN0IGNvbG9yID0gYHJnYigke2ZpbmFsLmpvaW4oJywnKX0pYFxuICAgICAgICAgIGNvbG9yc1tpbmRleF0gPSBjb2xvclxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnNldERhdGEoeyBjb2xvcnMgfSlcbiAgICB9XG4gIH0sXG5cbn0pXG4iXX0=