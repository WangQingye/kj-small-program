"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const res_loader_1 = require("./utils/res-loader");
Component({
    properties: {
        book: {
            type: Number,
            value: 11
        }
    },
    data: {
        retry: 3,
        totalResCount: 1,
        progress: '0',
        loaded: false,
        hasVideo: false,
        current: 0,
        throttleFlag: 0,
        timeout: null,
        bgm: '',
        bgmLocal: '',
        cover: '',
        pages: [],
        pagesLocal: [],
        isVideoPlaying: false,
        videoStyle: 'left:1000px;',
        videoHeight: 300,
        videoSrc: ''
    },
    methods: {
        getMagazineData() {
            if (!this.data.book && !(this.data.book === 0)) {
                this.showNetError();
                return;
            }
            const that = this;
            wx.request({
                url: 'https://xgbapi.zcoming.com/api/magazine/show',
                method: 'POST',
                data: {
                    'magazine_id': this.data.book
                },
                success(res) {
                    const data = res.data.data;
                    that.setData({ magazine: data });
                    that.handleMagazineData();
                },
                fail(err) {
                    if (that.data.retry > 0) {
                        that.setData({ retry: that.data.retry - 1 });
                        setTimeout(() => {
                            that.getMagazineData();
                        }, 0);
                    }
                    else {
                        that.showNetError();
                    }
                }
            });
        },
        showNetError() {
            wx.showModal({
                title: '网络错误',
                content: '未获取到杂志信息',
                showCancel: false,
                confirmText: '返回',
                confirmColor: '#000000',
                success() {
                    wx.navigateBack({
                        delta: 1
                    });
                }
            });
        },
        handleMagazineData() {
            const { title, audio_url, tail_pic, page_join, } = this.data.magazine;
            wx.setNavigationBarTitle({
                title
            });
            this.setData({
                pages: page_join,
                bgm: audio_url,
                cover: tail_pic,
                isVideoPlaying: false,
                videoStyle: `left:${this.data.windowWidth}px;`,
            });
            this.initVideoContext();
            this.loadRes();
        },
        initVideoContext() {
            let hasVideo = false;
            this.data.pages.forEach(page => {
                if (page.type === 4 || page.type === 3) {
                    hasVideo = true;
                }
            });
            this.setData({
                hasVideo,
            });
            if (hasVideo) {
                this.videoContext = wx.createVideoContext('common-video', this);
            }
        },
        loadRes() {
            const pages = this.data.pages;
            let resList = [this.data.cover];
            if (this.data.bgm) {
                resList.push(this.data.bgm);
            }
            pages.forEach(page => {
                [
                    'pic',
                    'video_cover',
                    'base_pic',
                    'sign_pic',
                    'video_url',
                ].forEach(key => {
                    if (page[key]) {
                        resList.push(page[key]);
                    }
                });
                if (page.pic_join.length) {
                    page.pic_join.forEach(item => {
                        resList.push(item.pic);
                    });
                }
            });
            this.setData({
                totalResCount: resList.length
            });
            res_loader_1.loadRes(resList.concat(), this.onProgress, this.onResLoaded, this);
        },
        onProgress(current) {
            let total = this.data.totalResCount;
            let progress = Number(100 * current / total).toFixed(0);
            this.setData({ progress });
        },
        onResLoaded(loadedResList) {
            const getLocal = url => {
                for (let i = loadedResList.length - 1; i >= 0; i--) {
                    if (loadedResList[i].origin === url) {
                        return loadedResList[i].local;
                    }
                }
            };
            if (this.data.bgm) {
                const bgmLocal = getLocal(this.data.bgm);
                this.setData({ bgmLocal });
            }
            const pages = this.data.pages;
            let pagesLocal = JSON.parse(JSON.stringify(pages));
            pagesLocal.forEach(page => {
                [
                    'pic',
                    'video_cover',
                    'base_pic',
                    'sign_pic',
                    'video_url',
                ].forEach(key => {
                    if (page[key]) {
                        page[key] = getLocal(page[key]);
                    }
                });
                if (page.pic_join.length) {
                    page.pic_join.forEach(item => {
                        item.pic = getLocal(item.pic);
                    });
                }
            });
            this.setData({ pagesLocal, loaded: true });
            setTimeout(() => {
                this.selectComponent(`.layout-${this.data.current}`).setEnter();
            }, 0);
        },
        onFinish({ detail }) {
            let { current } = detail;
            let previous = this.data.current;
            if (previous !== current) {
                if (this.data.timeout) {
                    clearTimeout(this.data.timeout);
                    this.data.timeout = null;
                }
                this.data.timeout = setTimeout(() => {
                    this.selectComponent(`.layout-${previous}`).setExit();
                    this.selectComponent(`.layout-${current}`).setEnter();
                }, 0);
            }
            this.setData({ current });
        },
        onSwipe({ detail }) {
            this.setItemAnim(~~detail.dx);
            if (this.data.hasVideo) {
                this.stopPlay();
            }
        },
        setItemAnim(dx) {
            let sign = Math.sign(dx);
            let current = this.data.current;
            let next = sign + current;
            let step = Number(dx / this.data.windowWidth).toFixed(2);
            let abs = Math.abs(step);
            if (abs > 1) {
                let dis = sign * ~~abs;
                next += dis;
                current += dis;
                step -= dis;
            }
            if (0 <= next && next < this.data.pages.length) {
                this.selectComponent(`.layout-${next}`).setFrame(step, true);
            }
            this.selectComponent(`.layout-${current}`).setFrame(step, false);
        },
        onVideoPlay({ detail }) {
            const videoContext = this.videoContext;
            if (!videoContext) {
                this.setData({
                    isVideoPlaying: false
                });
                return;
            }
            let config = null;
            this.data.pagesLocal.forEach(page => {
                if (page.id === +detail) {
                    config = page;
                }
            });
            const { type, video_url, video_cover } = config;
            const videoHeight = this.data.videoHeight;
            const videoStyle = type === 3 ?
                'height:100vh;top:0px;margin-top:0px;' :
                `height:${videoHeight}px;margin-top:-${~~(videoHeight / 2)}px;`;
            this.setData({
                isVideoPlaying: true,
                videoSrc: video_url,
                videoCover: video_cover,
                videoStyle,
            });
            wx.nextTick(() => {
                videoContext.seek(0);
                videoContext.play();
            });
        },
        stopPlay() {
            let windowWidth = this.data.windowWidth;
            this.setData({
                isVideoPlaying: false,
                videoStyle: `left:${windowWidth}px;`,
            });
            if (this.videoContext) {
                this.videoContext.pause();
            }
        },
    },
    lifetimes: {
        attached() {
            let that = this;
            wx.getSystemInfo({
                success({ windowWidth, windowHeight }) {
                    const videoHeight = ~~(windowWidth * 9 / 16);
                    that.setData({
                        windowWidth,
                        windowHeight,
                        videoHeight
                    });
                }
            });
            wx.setNavigationBarTitle({
                title: '加载中'
            });
            this.getMagazineData();
        },
        detached() {
            this.setData({
                retry: 3,
                totalResCount: 1,
                progress: '0',
                loaded: false,
                hasVideo: false,
                current: 0,
                throttleFlag: 0,
                timeout: null,
                bgm: '',
                bgmLocal: '',
                cover: '',
                pages: [],
                pagesLocal: [],
                isVideoPlaying: false,
                videoStyle: 'left:1000px;',
                videoHeight: 300,
                videoSrc: ''
            });
        },
    }
});
//# sourceMappingURL=data:application/json;base64,