"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const reqCountLimit = 5;
let loadList = [];
let loadedResList = [];
let caller = null;
let onProgress;
let onResLoaded;
let reqCount = 0;
let totalCount = 0;
function loadRes(resList, onProgressFun, onResLoadedFun, funCaller) {
    totalCount = resList.length;
    reqCount = 0;
    loadList = resList;
    onProgress = onProgressFun;
    onResLoaded = onResLoadedFun;
    caller = funCaller;
    loadedResList = [];
    startLoad();
}
exports.loadRes = loadRes;
function startLoad() {
    while (reqCount < reqCountLimit && loadList.length > 0) {
        let url = loadList.pop();
        reqCount++;
        loadSingleRes(url)
            .then(path => {
            reqCount--;
            onLoadSuccess(url, path);
        })
            .catch(err => {
            reqCount--;
            console.warn('load res error path=' + url, err);
            loadList.push(url);
            setTimeout(() => {
                startLoad();
            }, 10);
        });
    }
}
function loadSingleRes(url) {
    return new Promise((resolve, reject) => {
        wx.downloadFile({
            url,
            success({ tempFilePath }) {
                resolve(tempFilePath);
            },
            fail: reject
        });
    });
}
function onLoadSuccess(origin, local) {
    loadedResList.push({ origin, local });
    if (onProgress && caller) {
        onProgress.call(caller, loadedResList.length);
    }
    if (loadedResList.length < totalCount) {
        setTimeout(() => {
            startLoad();
        }, 10);
    }
    else {
        if (onResLoaded && caller) {
            onResLoaded.call(caller, loadedResList);
            onResLoaded = null;
            onProgress = null;
            caller = null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlcy1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUE7QUFDdkIsSUFBSSxRQUFRLEdBQWtCLEVBQUUsQ0FBQTtBQUNoQyxJQUFJLGFBQWEsR0FBNkMsRUFBRSxDQUFBO0FBQ2hFLElBQUksTUFBTSxHQUFRLElBQUksQ0FBQTtBQUN0QixJQUFJLFVBQW9CLENBQUE7QUFDeEIsSUFBSSxXQUFxQixDQUFBO0FBQ3pCLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQTtBQUNoQixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUE7QUFFbEIsU0FBUyxPQUFPLENBQUMsT0FBc0IsRUFBRSxhQUF1QixFQUFFLGNBQXdCLEVBQUUsU0FBYztJQUN4RyxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQTtJQUMzQixRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQ1osUUFBUSxHQUFHLE9BQU8sQ0FBQTtJQUNsQixVQUFVLEdBQUcsYUFBYSxDQUFBO0lBQzFCLFdBQVcsR0FBRyxjQUFjLENBQUE7SUFDNUIsTUFBTSxHQUFHLFNBQVMsQ0FBQTtJQUNsQixhQUFhLEdBQUcsRUFBRSxDQUFBO0lBQ2xCLFNBQVMsRUFBRSxDQUFBO0FBQ2IsQ0FBQztBQXdEQywwQkFBTztBQXREVCxTQUFTLFNBQVM7SUFDaEIsT0FBTyxRQUFRLEdBQUcsYUFBYSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3RELElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQVksQ0FBQTtRQUNsQyxRQUFRLEVBQUUsQ0FBQTtRQUNWLGFBQWEsQ0FBQyxHQUFHLENBQUM7YUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxRQUFRLEVBQUUsQ0FBQTtZQUNWLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDMUIsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsUUFBUSxFQUFFLENBQUE7WUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUMvQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQ2xCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsU0FBUyxFQUFFLENBQUE7WUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDUixDQUFDLENBQUMsQ0FBQTtLQUNMO0FBQ0gsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQUc7SUFDeEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxFQUFFLENBQUMsWUFBWSxDQUFDO1lBQ2QsR0FBRztZQUNILE9BQU8sQ0FBQyxFQUFFLFlBQVksRUFBRTtnQkFDdEIsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQ3ZCLENBQUM7WUFDRCxJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLO0lBQ2xDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUNyQyxJQUFJLFVBQVUsSUFBSSxNQUFNLEVBQUU7UUFDeEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQzlDO0lBQ0QsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLFVBQVUsRUFBRTtRQUNyQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsU0FBUyxFQUFFLENBQUE7UUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7S0FDUDtTQUVJO1FBQ0gsSUFBSSxXQUFXLElBQUksTUFBTSxFQUFFO1lBQ3pCLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1lBQ3ZDLFdBQVcsR0FBRyxJQUFJLENBQUE7WUFDbEIsVUFBVSxHQUFHLElBQUksQ0FBQTtZQUNqQixNQUFNLEdBQUcsSUFBSSxDQUFBO1NBQ2Q7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXFDb3VudExpbWl0ID0gNVxubGV0IGxvYWRMaXN0OiBBcnJheTxzdHJpbmc+ID0gW11cbmxldCBsb2FkZWRSZXNMaXN0OiBBcnJheTx7IG9yaWdpbjogc3RyaW5nOyBsb2NhbDogc3RyaW5nIH0+ID0gW11cbmxldCBjYWxsZXI6IGFueSA9IG51bGxcbmxldCBvblByb2dyZXNzOiBGdW5jdGlvblxubGV0IG9uUmVzTG9hZGVkOiBGdW5jdGlvblxubGV0IHJlcUNvdW50ID0gMFxubGV0IHRvdGFsQ291bnQgPSAwXG5cbmZ1bmN0aW9uIGxvYWRSZXMocmVzTGlzdDogQXJyYXk8c3RyaW5nPiwgb25Qcm9ncmVzc0Z1bjogRnVuY3Rpb24sIG9uUmVzTG9hZGVkRnVuOiBGdW5jdGlvbiwgZnVuQ2FsbGVyOiBhbnkpIHtcbiAgdG90YWxDb3VudCA9IHJlc0xpc3QubGVuZ3RoXG4gIHJlcUNvdW50ID0gMFxuICBsb2FkTGlzdCA9IHJlc0xpc3RcbiAgb25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3NGdW5cbiAgb25SZXNMb2FkZWQgPSBvblJlc0xvYWRlZEZ1blxuICBjYWxsZXIgPSBmdW5DYWxsZXJcbiAgbG9hZGVkUmVzTGlzdCA9IFtdXG4gIHN0YXJ0TG9hZCgpXG59XG5cbmZ1bmN0aW9uIHN0YXJ0TG9hZCgpIHtcbiAgd2hpbGUgKHJlcUNvdW50IDwgcmVxQ291bnRMaW1pdCAmJiBsb2FkTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgbGV0IHVybCA9IGxvYWRMaXN0LnBvcCgpIGFzIHN0cmluZ1xuICAgIHJlcUNvdW50KytcbiAgICBsb2FkU2luZ2xlUmVzKHVybClcbiAgICAgIC50aGVuKHBhdGggPT4ge1xuICAgICAgICByZXFDb3VudC0tXG4gICAgICAgIG9uTG9hZFN1Y2Nlc3ModXJsLCBwYXRoKVxuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICByZXFDb3VudC0tXG4gICAgICAgIGNvbnNvbGUud2FybignbG9hZCByZXMgZXJyb3IgcGF0aD0nICsgdXJsLCBlcnIpXG4gICAgICAgIGxvYWRMaXN0LnB1c2godXJsKVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBzdGFydExvYWQoKVxuICAgICAgICB9LCAxMClcbiAgICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gbG9hZFNpbmdsZVJlcyh1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB3eC5kb3dubG9hZEZpbGUoe1xuICAgICAgdXJsLFxuICAgICAgc3VjY2Vzcyh7IHRlbXBGaWxlUGF0aCB9KSB7XG4gICAgICAgIHJlc29sdmUodGVtcEZpbGVQYXRoKVxuICAgICAgfSxcbiAgICAgIGZhaWw6IHJlamVjdFxuICAgIH0pXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG9uTG9hZFN1Y2Nlc3Mob3JpZ2luLCBsb2NhbCkge1xuICBsb2FkZWRSZXNMaXN0LnB1c2goeyBvcmlnaW4sIGxvY2FsIH0pXG4gIGlmIChvblByb2dyZXNzICYmIGNhbGxlcikge1xuICAgIG9uUHJvZ3Jlc3MuY2FsbChjYWxsZXIsIGxvYWRlZFJlc0xpc3QubGVuZ3RoKVxuICB9XG4gIGlmIChsb2FkZWRSZXNMaXN0Lmxlbmd0aCA8IHRvdGFsQ291bnQpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHN0YXJ0TG9hZCgpXG4gICAgfSwgMTApXG4gIH1cbiAgLy8g5Yqg6L295a6M5q+VXG4gIGVsc2Uge1xuICAgIGlmIChvblJlc0xvYWRlZCAmJiBjYWxsZXIpIHtcbiAgICAgIG9uUmVzTG9hZGVkLmNhbGwoY2FsbGVyLCBsb2FkZWRSZXNMaXN0KVxuICAgICAgb25SZXNMb2FkZWQgPSBudWxsXG4gICAgICBvblByb2dyZXNzID0gbnVsbFxuICAgICAgY2FsbGVyID0gbnVsbFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge1xuICBsb2FkUmVzXG59Il19