"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pixel_handler_1 = require("../../utils/pixel-handler");
Component({
    properties: {
        config: {
            type: Object,
            value: null
        }
    },
    data: {
        inited: false,
        containerSize: [200, 200],
        containerStyle: '',
        pos: [0, 0],
        offset: [0, 0],
        showPanel: false,
        baseSize: [200, 300],
    },
    methods: {
        setFrame() { },
        setEnter() {
            if (!this.data.inited) {
                this.setData({ inited: true });
                this.initRender();
            }
        },
        setExit() { },
        initRender() {
            wx.showLoading({ title: '', mask: true });
            const { base_pic, sign_pic } = this.data.config;
            if (base_pic && sign_pic) {
                Promise.all([
                    this.getStageSize(),
                    this.getImgSize(base_pic),
                    this.getImgSize(sign_pic),
                ]).then(arr => {
                    this.setData({
                        stageSize: arr[0],
                        baseSize: arr[1],
                        signSize: arr[2],
                        baseUrl: arr[1][2],
                        signUrl: arr[2][2],
                    });
                    this.setCanvasContainer();
                }).catch(err => {
                    console.warn('getImgInfo error:', err);
                });
            }
        },
        getImgSize(url) {
            return new Promise((resolve, reject) => {
                wx.getImageInfo({
                    src: url,
                    success({ width, height, path }) {
                        resolve([width, height, path]);
                    },
                    fail: reject,
                });
            });
        },
        getStageSize() {
            return new Promise((resolve, reject) => {
                wx.getSystemInfo({
                    success({ windowWidth, windowHeight }) {
                        resolve([windowWidth, windowHeight]);
                    },
                    fail: reject
                });
            });
        },
        setCanvasContainer() {
            this.setContainerSize();
            this.setContext();
        },
        setContainerSize() {
            const { stageSize, baseSize, signSize, } = this.data;
            const [cw, ch] = [
                stageSize[0],
                ~~(baseSize[1] * stageSize[0] / baseSize[0])
            ];
            this.setData({
                containerSize: [cw, ch],
                containerStyle: [
                    `width:${cw}px;`,
                    `height:${ch}px;`,
                ].join('')
            });
            const scale = stageSize[0] / baseSize[0];
            const [sdw, sdh] = [
                ~~(scale * signSize[0]),
                ~~(scale * signSize[1]),
            ];
            this.setData({
                signDisplaySize: [sdw, sdh],
                signStyle: [
                    `width:${sdw}px;`,
                    `height:${sdh}px;`,
                ].join('')
            });
        },
        setContext() {
            const { baseSize, containerSize, signSize, signDisplaySize, } = this.data;
            const [bw, bh] = baseSize;
            const [sw, sh] = signSize;
            const [sdw, sdh] = signDisplaySize;
            const that = this;
            const baseCtx = wx.createCanvasContext(`base-${this.data.config.id}`, this);
            this.setData({ baseCtx });
            baseCtx.drawImage(this.data.baseUrl, 0, 0, bw, bh, 0, 0, bw, bh);
            baseCtx.draw(false);
            const signCtx = wx.createCanvasContext(`sign-${this.data.config.id}`, this);
            this.setData({ signCtx });
            signCtx.drawImage(this.data.signUrl, 0, 0, sw, sh, 0, 0, sdw, sdh);
            signCtx.draw(false, function () {
                that.saveOriginData();
                that.onFirstDraw();
            });
        },
        saveOriginData() {
            const { signDisplaySize, } = this.data;
            const [sdw, sdh] = signDisplaySize;
            const that = this;
            wx.canvasGetImageData({
                canvasId: `sign-${this.data.config.id}`,
                x: 0,
                y: 0,
                width: sdw,
                height: sdh,
                success(res) {
                    console.log('imgdata size : ' + res.width + 'X' + res.height);
                    that.signData = res.data;
                    that.signDataSize = [res.width, res.height];
                }
            }, this);
        },
        onFirstDraw() {
            const { signDisplaySize, } = this.data;
            const [sdw, sdh] = signDisplaySize;
            const that = this;
            wx.canvasToTempFilePath({
                x: 0,
                y: 0,
                width: sdw,
                height: sdh,
                quality: 1,
                canvasId: `sign-${this.data.config.id}`,
                success({ tempFilePath }) {
                    that.setData({
                        tempSignUrl: tempFilePath
                    });
                    wx.getImageInfo({
                        src: tempFilePath,
                        success(res) {
                            that.setData({
                                tempSize: [res.width, res.height]
                            });
                            wx.hideLoading();
                        },
                        fail() {
                            wx.hideLoading();
                        }
                    });
                },
                fail(err) {
                    wx.hideLoading();
                    console.warn('tempFilePath error:', err);
                }
            }, this);
        },
        onTouchStart(e) {
            const [posX, posY] = this.data.pos;
            const { pageX, pageY } = e.touches[0];
            const { offsetLeft, offsetTop } = e.currentTarget;
            const x = ~~(pageX - offsetLeft);
            const y = ~~(pageY - offsetTop);
            const [sdw, sdh] = this.data.signDisplaySize;
            let isMovingSign = false;
            if (posX <= x &&
                x <= posX + sdw &&
                posY <= y &&
                y <= posY + sdh) {
                isMovingSign = true;
            }
            const [offsetX, offsetY] = [x - posX, y - posY];
            this.setData({
                isMovingSign,
                offset: [offsetX, offsetY],
                touchTs: Date.now(),
                touchPos: [pageX, pageY],
            });
        },
        onTouchMove(e) {
            if (!this.data.isMovingSign) {
                return;
            }
            const [offsetX, offsetY] = this.data.offset;
            const x = ~~(e.touches[0].pageX - e.currentTarget.offsetLeft);
            const y = ~~(e.touches[0].pageY - e.currentTarget.offsetTop);
            const [sdw, sdh] = this.data.signDisplaySize;
            const [cw, ch] = this.data.containerSize;
            let [posX, posY] = [x - offsetX, y - offsetY];
            posX = Math.max(0, posX);
            posX = Math.min(cw - sdw, posX);
            posY = Math.max(0, posY);
            posY = Math.min(ch - sdh, posY);
            this.setData({
                pos: [posX, posY]
            });
        },
        onTouchEnd(e) {
            const { pageX, pageY } = e.changedTouches[0];
            const { touchTs, touchPos } = this.data;
            const dis = Math.sqrt(Math.pow((pageX - touchPos[0]), 2) +
                Math.pow((pageY - touchPos[1]), 2));
            if (Date.now() - touchTs < 300 && dis < 30) {
                this.onSwitchPanel();
            }
        },
        onPickColor({ detail }) {
            let rgb = [0, 0, 0];
            try {
                rgb = detail.replace('rgb(', '').replace(')', '').split(',').map(c => +c);
            }
            catch (e) {
                console.warn('convert color error:', e);
            }
            this.renderSignImg(rgb);
        },
        renderSignImg(rgb) {
            wx.showLoading({ title: '保存中', mask: true });
            const that = this;
            const pixels = pixel_handler_1.colorMatrixFilter(this.signData, rgb);
            wx.canvasPutImageData({
                canvasId: `sign-${this.data.config.id}`,
                x: 0,
                y: 0,
                width: this.signDataSize[0],
                height: this.signDataSize[1],
                data: pixels,
                success() {
                    that.onFirstDraw();
                }
            }, this);
        },
        onSaveImg() {
            wx.showLoading({ title: '保存中', mask: true });
            const { baseSize, signSize, containerSize, tempSize, pos, } = this.data;
            const [bw, bh] = baseSize;
            const [sw, sh] = signSize;
            const [cw] = containerSize;
            const [tw, th] = tempSize;
            const scale = cw / bw;
            if (this.data.baseCtx) {
                this.data.baseCtx.drawImage(this.data.baseUrl, 0, 0, bw, bh, 0, 0, bw, bh);
                this.data.baseCtx.drawImage(this.data.tempSignUrl, 0, 0, tw, th, ~~(pos[0] / scale), ~~(pos[1] / scale), sw, sh);
                this.data.baseCtx.draw(false, () => {
                    this.convertCanvas2TempFile();
                });
            }
        },
        convertCanvas2TempFile() {
            const { baseSize } = this.data;
            const [bw, bh] = baseSize;
            const that = this;
            wx.canvasToTempFilePath({
                x: 0,
                y: 0,
                width: bw,
                height: bh,
                quality: 1,
                canvasId: `base-${this.data.config.id}`,
                success({ tempFilePath }) {
                    that.saveImageFile2Album(tempFilePath);
                },
                fail(err) {
                    console.warn('tempFilePath error:', err);
                    wx.hideLoading();
                }
            }, this);
        },
        saveImageFile2Album(filePath) {
            wx.saveImageToPhotosAlbum({
                filePath,
                success() {
                    wx.showToast({
                        title: '保存成功',
                        icon: 'success',
                        duration: 1000
                    });
                },
                complete() {
                    wx.hideLoading();
                }
            });
        },
        onSwitchPanel() {
            this.setData({
                showPanel: !this.data.showPanel
            });
        },
    },
});
//# sourceMappingURL=data:application/json;base64,